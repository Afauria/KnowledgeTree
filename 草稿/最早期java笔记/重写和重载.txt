重写Overiding: 子类重写父类的方法。子类中的方法与父类中继承的方法有完全相同的返回值类型、方法名、参数个数以及参数类型
		调用时自动调用子类方法，要调用父类方法则用super.方法名();

(一)  父类方法的参数列表必须完全与被子类重写的方法的参数列表相同，否则不能称其为重写而是重载。.. 
(二)  父类的返回类型必须与被子类重写的方法返回类型相同，否则不能称其为重写而是重载。.. 
(三)  Java中规定，被子类重写的方法不能拥有比父类方法更加严格的访问权限。访问权限大小关系为：

编写过Java程序的人就知道，父类中的方法并不是在任何情况下都可以重写的，当父类中方法的访问权限修饰符为private时，该方法只能被自己的类访问，不能被外部的类访问，在子类是不能被重写的。如果定义父类的方法为public，在子类定义为private，程序运行时就会报错。
(四)  由于父类的访问权限修饰符的限制一定要大于被子类重写方法的访问权限修饰符，而private权限最小。所以如果某一个方法在父类中的访问权限是private，那么就不能在子类中对其进行重写。如果重新定义，也只是定义了一个新的方法，不会达到重写的效果。
(五)  在继承过程中如果父类当中的方法抛出异常，那么在子类中重写父类的该方法时，也要抛出异常，而且抛出的异常不能多于父类中抛出的异常(可以等于父类中抛出的异常)。换句话说，重写方法一定不能抛出新的检查异常，或者比被重写方法声明更加宽泛的检查型异常。

重载Overloading：方法重载是让类以统一的方式处理不同类型数据的一种手段。调用方法时通过传递给它们的不同个数和类型的参数来决定具体使用哪个方法，这就是多态性
	所谓方法重载是指在一个类中，多个方法的方法名相同，但是参数列表不同。参数列表不同指的是参数个数、参数类型或者参数的顺序不同。方法的重载在实际应用中也会经常用到。不仅是一般的方法，构造方法也可以重载